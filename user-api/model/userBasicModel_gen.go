// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userBasicFieldNames          = builder.RawFieldNames(&UserBasic{})
	userBasicRows                = strings.Join(userBasicFieldNames, ",")
	userBasicRowsExpectAutoSet   = strings.Join(stringx.Remove(userBasicFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	userBasicRowsWithPlaceHolder = strings.Join(stringx.Remove(userBasicFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"
)

type (
	userBasicModel interface {
		Insert(ctx context.Context, data *UserBasic) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*UserBasic, error)
		Update(ctx context.Context, data *UserBasic) error
		Delete(ctx context.Context, id uint64) error
		FindOneByName(ctx context.Context, name string) (*UserBasic, error)
		FindByInfo(ctx context.Context, name,email string) (int, error)
	}

	defaultUserBasicModel struct {
		conn  sqlx.SqlConn
		table string
	}

	UserBasic struct {
		Id        uint64         `db:"id"`
		Identity  sql.NullString `db:"identity"`
		Name      sql.NullString `db:"name"`
		Password  sql.NullString `db:"password"`
		Email     sql.NullString `db:"email"`
		CreatedAt sql.NullTime   `db:"created_at"`
		UpdatedAt sql.NullTime   `db:"updated_at"`
		DeletedAt sql.NullTime   `db:"deleted_at"`
	}
)


func newUserBasicModel(conn sqlx.SqlConn) *defaultUserBasicModel {
	return &defaultUserBasicModel{
		conn:  conn,
		table: "`user_basic`",
	}
}

func (m *defaultUserBasicModel) Delete(ctx context.Context, id uint64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultUserBasicModel) FindOne(ctx context.Context, id uint64) (*UserBasic, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userBasicRows, m.table)
	var resp UserBasic
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserBasicModel)FindByInfo(ctx context.Context, name,email string) (int, error){
	query := fmt.Sprintf("select %s from %s where `name` = ? OR `email` = ?", userBasicRows, m.table)
	users := make([]*UserBasic,0)
	err :=m.conn.QueryRows(&users,query,name,email)
	switch err {
	case nil:
		return len(users),nil
	case sqlc.ErrNotFound:
		return 0, ErrNotFound
	default:
		return 0, err
	}
	
}

func (m *defaultUserBasicModel)FindOneByName(ctx context.Context, name string) (*UserBasic, error){
	query := fmt.Sprintf("select %s from %s where `name` = ? limit 1", userBasicRows, m.table)
	var resp UserBasic
	err := m.conn.QueryRowCtx(ctx, &resp, query,name)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserBasicModel) Insert(ctx context.Context, data *UserBasic) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, userBasicRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Identity, data.Name, data.Password, data.Email, data.CreatedAt, data.UpdatedAt, data.DeletedAt)
	return ret, err
}

func (m *defaultUserBasicModel) Update(ctx context.Context, data *UserBasic) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, userBasicRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Identity, data.Name, data.Password, data.Email, data.CreatedAt, data.UpdatedAt, data.DeletedAt, data.Id)
	return err
}

func (m *defaultUserBasicModel) tableName() string {
	return m.table
}
