// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	shareBasicFieldNames          = builder.RawFieldNames(&ShareBasic{})
	shareBasicRows                = strings.Join(shareBasicFieldNames, ",")
	shareBasicRowsExpectAutoSet   = strings.Join(stringx.Remove(shareBasicFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	shareBasicRowsWithPlaceHolder = strings.Join(stringx.Remove(shareBasicFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"
)

type (
	shareBasicModel interface {
		Insert(ctx context.Context, data *ShareBasic) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*ShareBasic, error)
		Update(ctx context.Context, data *ShareBasic) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultShareBasicModel struct {
		conn  sqlx.SqlConn
		table string
	}

	ShareBasic struct {
		Id                 uint64         `db:"id"`
		Identity           sql.NullString `db:"identity"`
		UserIdentity       sql.NullString `db:"user_identity"`
		RepositoryIdentity sql.NullString `db:"repository_identity"`
		ExpiredTime        sql.NullInt64  `db:"expired_time"` // 失效时间，单位秒，0：永不失效
		CreatedAt          sql.NullTime   `db:"created_at"`
		UpdatedAt          sql.NullTime   `db:"updated_at"`
		DeletedAt          sql.NullTime   `db:"deleted_at"`
	}
)

func newShareBasicModel(conn sqlx.SqlConn) *defaultShareBasicModel {
	return &defaultShareBasicModel{
		conn:  conn,
		table: "`share_basic`",
	}
}

func (m *defaultShareBasicModel) Delete(ctx context.Context, id uint64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultShareBasicModel) FindOne(ctx context.Context, id uint64) (*ShareBasic, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", shareBasicRows, m.table)
	var resp ShareBasic
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultShareBasicModel) Insert(ctx context.Context, data *ShareBasic) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, shareBasicRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Identity, data.UserIdentity, data.RepositoryIdentity, data.ExpiredTime, data.CreatedAt, data.UpdatedAt, data.DeletedAt)
	return ret, err
}

func (m *defaultShareBasicModel) Update(ctx context.Context, data *ShareBasic) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, shareBasicRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Identity, data.UserIdentity, data.RepositoryIdentity, data.ExpiredTime, data.CreatedAt, data.UpdatedAt, data.DeletedAt, data.Id)
	return err
}

func (m *defaultShareBasicModel) tableName() string {
	return m.table
}
