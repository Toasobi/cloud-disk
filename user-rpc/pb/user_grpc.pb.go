// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.4
// source: user.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UsercenterClient is the client API for Usercenter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UsercenterClient interface {
	//用户注册
	GetUserRegister(ctx context.Context, in *GetUserRegisterReq, opts ...grpc.CallOption) (*GetUserRegisterResp, error)
	//用户登录
	GetUserLogin(ctx context.Context, in *GetUserLoginReq, opts ...grpc.CallOption) (*GetUserLoginResp, error)
	//发送验证码
	GetUserSendCode(ctx context.Context, in *GetUserSendCodeReq, opts ...grpc.CallOption) (*GetUserSendCodeResp, error)
	//发送文件
	GetFileUpload(ctx context.Context, in *GetFileUploadReq, opts ...grpc.CallOption) (*GetFileUploadResp, error)
	//关联用户数据库
	GetUserRepositorySave(ctx context.Context, in *GetUserRepositorySaveReq, opts ...grpc.CallOption) (*GetUserRepositorySaveResp, error)
	//列出文件情况
	GetUserFileList(ctx context.Context, in *GetUserFileListReq, opts ...grpc.CallOption) (*GetUserFileListResp, error)
	//更新文件
	GetUserFileUpdate(ctx context.Context, in *GetUserFileUpdateReq, opts ...grpc.CallOption) (*GetUserFileUpdateResp, error)
	//创建文件夹
	GetUserFolderCreate(ctx context.Context, in *GetUserFolderCreateReq, opts ...grpc.CallOption) (*GetUserFolderCreateResp, error)
	//文件删除
	GetUserFileDelete(ctx context.Context, in *GetUserFileDeleteReq, opts ...grpc.CallOption) (*GetUserFileDeleteResp, error)
	//刷新token
	GetUserRefreshToken(ctx context.Context, in *GetUserRefreshTokenReq, opts ...grpc.CallOption) (*GetUserRefreshTokenResp, error)
	//分片上传准备
	GetUserUploadPrepare(ctx context.Context, in *GetUserUploadPrepareReq, opts ...grpc.CallOption) (*GetUserUploadPrepareResp, error)
	//分片上传
	GetUserFileUploadChunk(ctx context.Context, in *GetUserFileUploadChunkReq, opts ...grpc.CallOption) (*GetUserFileUploadChunkResp, error)
	//分片上传完成
	GetUserFileUploadChunkComplete(ctx context.Context, in *GetUserFileUploadChunkCompleteReq, opts ...grpc.CallOption) (*GetUserFileUploadChunkCompleteResp, error)
}

type usercenterClient struct {
	cc grpc.ClientConnInterface
}

func NewUsercenterClient(cc grpc.ClientConnInterface) UsercenterClient {
	return &usercenterClient{cc}
}

func (c *usercenterClient) GetUserRegister(ctx context.Context, in *GetUserRegisterReq, opts ...grpc.CallOption) (*GetUserRegisterResp, error) {
	out := new(GetUserRegisterResp)
	err := c.cc.Invoke(ctx, "/pb.usercenter/GetUserRegister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usercenterClient) GetUserLogin(ctx context.Context, in *GetUserLoginReq, opts ...grpc.CallOption) (*GetUserLoginResp, error) {
	out := new(GetUserLoginResp)
	err := c.cc.Invoke(ctx, "/pb.usercenter/GetUserLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usercenterClient) GetUserSendCode(ctx context.Context, in *GetUserSendCodeReq, opts ...grpc.CallOption) (*GetUserSendCodeResp, error) {
	out := new(GetUserSendCodeResp)
	err := c.cc.Invoke(ctx, "/pb.usercenter/GetUserSendCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usercenterClient) GetFileUpload(ctx context.Context, in *GetFileUploadReq, opts ...grpc.CallOption) (*GetFileUploadResp, error) {
	out := new(GetFileUploadResp)
	err := c.cc.Invoke(ctx, "/pb.usercenter/GetFileUpload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usercenterClient) GetUserRepositorySave(ctx context.Context, in *GetUserRepositorySaveReq, opts ...grpc.CallOption) (*GetUserRepositorySaveResp, error) {
	out := new(GetUserRepositorySaveResp)
	err := c.cc.Invoke(ctx, "/pb.usercenter/GetUserRepositorySave", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usercenterClient) GetUserFileList(ctx context.Context, in *GetUserFileListReq, opts ...grpc.CallOption) (*GetUserFileListResp, error) {
	out := new(GetUserFileListResp)
	err := c.cc.Invoke(ctx, "/pb.usercenter/GetUserFileList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usercenterClient) GetUserFileUpdate(ctx context.Context, in *GetUserFileUpdateReq, opts ...grpc.CallOption) (*GetUserFileUpdateResp, error) {
	out := new(GetUserFileUpdateResp)
	err := c.cc.Invoke(ctx, "/pb.usercenter/GetUserFileUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usercenterClient) GetUserFolderCreate(ctx context.Context, in *GetUserFolderCreateReq, opts ...grpc.CallOption) (*GetUserFolderCreateResp, error) {
	out := new(GetUserFolderCreateResp)
	err := c.cc.Invoke(ctx, "/pb.usercenter/GetUserFolderCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usercenterClient) GetUserFileDelete(ctx context.Context, in *GetUserFileDeleteReq, opts ...grpc.CallOption) (*GetUserFileDeleteResp, error) {
	out := new(GetUserFileDeleteResp)
	err := c.cc.Invoke(ctx, "/pb.usercenter/GetUserFileDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usercenterClient) GetUserRefreshToken(ctx context.Context, in *GetUserRefreshTokenReq, opts ...grpc.CallOption) (*GetUserRefreshTokenResp, error) {
	out := new(GetUserRefreshTokenResp)
	err := c.cc.Invoke(ctx, "/pb.usercenter/GetUserRefreshToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usercenterClient) GetUserUploadPrepare(ctx context.Context, in *GetUserUploadPrepareReq, opts ...grpc.CallOption) (*GetUserUploadPrepareResp, error) {
	out := new(GetUserUploadPrepareResp)
	err := c.cc.Invoke(ctx, "/pb.usercenter/GetUserUploadPrepare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usercenterClient) GetUserFileUploadChunk(ctx context.Context, in *GetUserFileUploadChunkReq, opts ...grpc.CallOption) (*GetUserFileUploadChunkResp, error) {
	out := new(GetUserFileUploadChunkResp)
	err := c.cc.Invoke(ctx, "/pb.usercenter/GetUserFileUploadChunk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usercenterClient) GetUserFileUploadChunkComplete(ctx context.Context, in *GetUserFileUploadChunkCompleteReq, opts ...grpc.CallOption) (*GetUserFileUploadChunkCompleteResp, error) {
	out := new(GetUserFileUploadChunkCompleteResp)
	err := c.cc.Invoke(ctx, "/pb.usercenter/GetUserFileUploadChunkComplete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UsercenterServer is the server API for Usercenter service.
// All implementations must embed UnimplementedUsercenterServer
// for forward compatibility
type UsercenterServer interface {
	//用户注册
	GetUserRegister(context.Context, *GetUserRegisterReq) (*GetUserRegisterResp, error)
	//用户登录
	GetUserLogin(context.Context, *GetUserLoginReq) (*GetUserLoginResp, error)
	//发送验证码
	GetUserSendCode(context.Context, *GetUserSendCodeReq) (*GetUserSendCodeResp, error)
	//发送文件
	GetFileUpload(context.Context, *GetFileUploadReq) (*GetFileUploadResp, error)
	//关联用户数据库
	GetUserRepositorySave(context.Context, *GetUserRepositorySaveReq) (*GetUserRepositorySaveResp, error)
	//列出文件情况
	GetUserFileList(context.Context, *GetUserFileListReq) (*GetUserFileListResp, error)
	//更新文件
	GetUserFileUpdate(context.Context, *GetUserFileUpdateReq) (*GetUserFileUpdateResp, error)
	//创建文件夹
	GetUserFolderCreate(context.Context, *GetUserFolderCreateReq) (*GetUserFolderCreateResp, error)
	//文件删除
	GetUserFileDelete(context.Context, *GetUserFileDeleteReq) (*GetUserFileDeleteResp, error)
	//刷新token
	GetUserRefreshToken(context.Context, *GetUserRefreshTokenReq) (*GetUserRefreshTokenResp, error)
	//分片上传准备
	GetUserUploadPrepare(context.Context, *GetUserUploadPrepareReq) (*GetUserUploadPrepareResp, error)
	//分片上传
	GetUserFileUploadChunk(context.Context, *GetUserFileUploadChunkReq) (*GetUserFileUploadChunkResp, error)
	//分片上传完成
	GetUserFileUploadChunkComplete(context.Context, *GetUserFileUploadChunkCompleteReq) (*GetUserFileUploadChunkCompleteResp, error)
	mustEmbedUnimplementedUsercenterServer()
}

// UnimplementedUsercenterServer must be embedded to have forward compatible implementations.
type UnimplementedUsercenterServer struct {
}

func (UnimplementedUsercenterServer) GetUserRegister(context.Context, *GetUserRegisterReq) (*GetUserRegisterResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserRegister not implemented")
}
func (UnimplementedUsercenterServer) GetUserLogin(context.Context, *GetUserLoginReq) (*GetUserLoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserLogin not implemented")
}
func (UnimplementedUsercenterServer) GetUserSendCode(context.Context, *GetUserSendCodeReq) (*GetUserSendCodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserSendCode not implemented")
}
func (UnimplementedUsercenterServer) GetFileUpload(context.Context, *GetFileUploadReq) (*GetFileUploadResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileUpload not implemented")
}
func (UnimplementedUsercenterServer) GetUserRepositorySave(context.Context, *GetUserRepositorySaveReq) (*GetUserRepositorySaveResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserRepositorySave not implemented")
}
func (UnimplementedUsercenterServer) GetUserFileList(context.Context, *GetUserFileListReq) (*GetUserFileListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserFileList not implemented")
}
func (UnimplementedUsercenterServer) GetUserFileUpdate(context.Context, *GetUserFileUpdateReq) (*GetUserFileUpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserFileUpdate not implemented")
}
func (UnimplementedUsercenterServer) GetUserFolderCreate(context.Context, *GetUserFolderCreateReq) (*GetUserFolderCreateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserFolderCreate not implemented")
}
func (UnimplementedUsercenterServer) GetUserFileDelete(context.Context, *GetUserFileDeleteReq) (*GetUserFileDeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserFileDelete not implemented")
}
func (UnimplementedUsercenterServer) GetUserRefreshToken(context.Context, *GetUserRefreshTokenReq) (*GetUserRefreshTokenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserRefreshToken not implemented")
}
func (UnimplementedUsercenterServer) GetUserUploadPrepare(context.Context, *GetUserUploadPrepareReq) (*GetUserUploadPrepareResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserUploadPrepare not implemented")
}
func (UnimplementedUsercenterServer) GetUserFileUploadChunk(context.Context, *GetUserFileUploadChunkReq) (*GetUserFileUploadChunkResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserFileUploadChunk not implemented")
}
func (UnimplementedUsercenterServer) GetUserFileUploadChunkComplete(context.Context, *GetUserFileUploadChunkCompleteReq) (*GetUserFileUploadChunkCompleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserFileUploadChunkComplete not implemented")
}
func (UnimplementedUsercenterServer) mustEmbedUnimplementedUsercenterServer() {}

// UnsafeUsercenterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UsercenterServer will
// result in compilation errors.
type UnsafeUsercenterServer interface {
	mustEmbedUnimplementedUsercenterServer()
}

func RegisterUsercenterServer(s grpc.ServiceRegistrar, srv UsercenterServer) {
	s.RegisterService(&Usercenter_ServiceDesc, srv)
}

func _Usercenter_GetUserRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRegisterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsercenterServer).GetUserRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.usercenter/GetUserRegister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsercenterServer).GetUserRegister(ctx, req.(*GetUserRegisterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Usercenter_GetUserLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsercenterServer).GetUserLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.usercenter/GetUserLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsercenterServer).GetUserLogin(ctx, req.(*GetUserLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Usercenter_GetUserSendCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserSendCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsercenterServer).GetUserSendCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.usercenter/GetUserSendCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsercenterServer).GetUserSendCode(ctx, req.(*GetUserSendCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Usercenter_GetFileUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFileUploadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsercenterServer).GetFileUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.usercenter/GetFileUpload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsercenterServer).GetFileUpload(ctx, req.(*GetFileUploadReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Usercenter_GetUserRepositorySave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRepositorySaveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsercenterServer).GetUserRepositorySave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.usercenter/GetUserRepositorySave",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsercenterServer).GetUserRepositorySave(ctx, req.(*GetUserRepositorySaveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Usercenter_GetUserFileList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserFileListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsercenterServer).GetUserFileList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.usercenter/GetUserFileList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsercenterServer).GetUserFileList(ctx, req.(*GetUserFileListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Usercenter_GetUserFileUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserFileUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsercenterServer).GetUserFileUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.usercenter/GetUserFileUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsercenterServer).GetUserFileUpdate(ctx, req.(*GetUserFileUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Usercenter_GetUserFolderCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserFolderCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsercenterServer).GetUserFolderCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.usercenter/GetUserFolderCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsercenterServer).GetUserFolderCreate(ctx, req.(*GetUserFolderCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Usercenter_GetUserFileDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserFileDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsercenterServer).GetUserFileDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.usercenter/GetUserFileDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsercenterServer).GetUserFileDelete(ctx, req.(*GetUserFileDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Usercenter_GetUserRefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRefreshTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsercenterServer).GetUserRefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.usercenter/GetUserRefreshToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsercenterServer).GetUserRefreshToken(ctx, req.(*GetUserRefreshTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Usercenter_GetUserUploadPrepare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserUploadPrepareReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsercenterServer).GetUserUploadPrepare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.usercenter/GetUserUploadPrepare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsercenterServer).GetUserUploadPrepare(ctx, req.(*GetUserUploadPrepareReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Usercenter_GetUserFileUploadChunk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserFileUploadChunkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsercenterServer).GetUserFileUploadChunk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.usercenter/GetUserFileUploadChunk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsercenterServer).GetUserFileUploadChunk(ctx, req.(*GetUserFileUploadChunkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Usercenter_GetUserFileUploadChunkComplete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserFileUploadChunkCompleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsercenterServer).GetUserFileUploadChunkComplete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.usercenter/GetUserFileUploadChunkComplete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsercenterServer).GetUserFileUploadChunkComplete(ctx, req.(*GetUserFileUploadChunkCompleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Usercenter_ServiceDesc is the grpc.ServiceDesc for Usercenter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Usercenter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.usercenter",
	HandlerType: (*UsercenterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserRegister",
			Handler:    _Usercenter_GetUserRegister_Handler,
		},
		{
			MethodName: "GetUserLogin",
			Handler:    _Usercenter_GetUserLogin_Handler,
		},
		{
			MethodName: "GetUserSendCode",
			Handler:    _Usercenter_GetUserSendCode_Handler,
		},
		{
			MethodName: "GetFileUpload",
			Handler:    _Usercenter_GetFileUpload_Handler,
		},
		{
			MethodName: "GetUserRepositorySave",
			Handler:    _Usercenter_GetUserRepositorySave_Handler,
		},
		{
			MethodName: "GetUserFileList",
			Handler:    _Usercenter_GetUserFileList_Handler,
		},
		{
			MethodName: "GetUserFileUpdate",
			Handler:    _Usercenter_GetUserFileUpdate_Handler,
		},
		{
			MethodName: "GetUserFolderCreate",
			Handler:    _Usercenter_GetUserFolderCreate_Handler,
		},
		{
			MethodName: "GetUserFileDelete",
			Handler:    _Usercenter_GetUserFileDelete_Handler,
		},
		{
			MethodName: "GetUserRefreshToken",
			Handler:    _Usercenter_GetUserRefreshToken_Handler,
		},
		{
			MethodName: "GetUserUploadPrepare",
			Handler:    _Usercenter_GetUserUploadPrepare_Handler,
		},
		{
			MethodName: "GetUserFileUploadChunk",
			Handler:    _Usercenter_GetUserFileUploadChunk_Handler,
		},
		{
			MethodName: "GetUserFileUploadChunkComplete",
			Handler:    _Usercenter_GetUserFileUploadChunkComplete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}
